#!/usr/bin/env node
'use strict'
const fs = require('fs')
const param = process.argv[2]
const usage = require('../lib/usage').usage
const illegalOption = require('../lib/usage').illegalOption

if (!param) {
  process.stdin.pipe(process.stdout)
  return
}

if (param.indexOf('-') === 0) {
  switch (param[1]) {
    case '-':

      break;
    default:

  }
}



// if (process.argv[2].indexOf('--') === 0) {
//   usage()
//   return
// }

if (fs.statSync(param).isFile()) {
  fs.createReadStream(param)
    .pipe(process.stdout)
  return
} else if (fs.statSync(param).isDirectory()) {
  console.log(`cat: ${param}: Is a directory`)
  return
} else {

}


// // bail early if --help
// const usage = require('../lib/usage').usage
// if (process.argv.length <= 2 || process.argv.indexOf('--help') > - 1) {
//   return usage()
// }
//
// const Curl = require('node-libcurl').Curl
// let curl = new Curl();
//
// const optMap = require('../lib/options').optMap
// const curlBoolMapList = require('../lib/options').curlBoolMapList
//
// const argv = process.argv.slice(2)
//
// function parseOptions (argv) {
//   let url = argv.pop()
//
//   let len = argv.length
//   let opts = {}
//   opts['URL'] = url
//   // check for string that begins with '-', '--', a string that follows, that
//   // does not start with option delimiter and is not the url
//   argv.forEach(function (el, index, array) {
//     let key = '', val
//
//     if (!(el[0] === '-' || el[1] === '-')) return
//     if (optMap[el]) key = optMap[el]
//     if (index !== len - 1 && array[index + 1][0] !== '-') val = array[index + 1]
//     if (!val && key && curlBoolMapList.indexOf(key) > - 1) val = true
//
//     key ? opts[key] = val : 0
//   })
//
//   for (let key in opts) {
//     curl.setOpt(key, opts[key]);
//   }
// }
//
// parseOptions(argv)
//
// curl.on( 'end', function( statusCode, body, headers ) {
//     console.log(body);
//     this.close();
// });
//
// curl.on( 'error', curl.close.bind( curl ) );
// curl.perform();
